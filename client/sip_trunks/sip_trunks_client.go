// Code generated by go-swagger; DO NOT EDIT.

package sip_trunks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new sip trunks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new sip trunks API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new sip trunks API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for sip trunks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationXML sets the Content-Type header to "application/xml".
func WithContentTypeApplicationXML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/xml"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationXML sets the Accept header to "application/xml".
func WithAcceptApplicationXML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/xml"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	ThinkteluControlAPIRestServiceAddSIPTrunkDIDRanges(params *ThinkteluControlAPIRestServiceAddSIPTrunkDIDRangesParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceAddSIPTrunkDIDRangesOK, error)

	ThinkteluControlAPIRestServiceAddSIPTrunkDids(params *ThinkteluControlAPIRestServiceAddSIPTrunkDidsParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceAddSIPTrunkDidsOK, error)

	ThinkteluControlAPIRestServiceAddSIPTrunkLine(params *ThinkteluControlAPIRestServiceAddSIPTrunkLineParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceAddSIPTrunkLineOK, error)

	ThinkteluControlAPIRestServiceAddSIPTrunkRateCenterDids(params *ThinkteluControlAPIRestServiceAddSIPTrunkRateCenterDidsParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceAddSIPTrunkRateCenterDidsOK, error)

	ThinkteluControlAPIRestServiceCancelSIPTrunk(params *ThinkteluControlAPIRestServiceCancelSIPTrunkParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceCancelSIPTrunkOK, error)

	ThinkteluControlAPIRestServiceCancelSIPTrunkDID(params *ThinkteluControlAPIRestServiceCancelSIPTrunkDIDParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceCancelSIPTrunkDIDOK, error)

	ThinkteluControlAPIRestServiceCancelSIPTrunkLine(params *ThinkteluControlAPIRestServiceCancelSIPTrunkLineParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceCancelSIPTrunkLineOK, error)

	ThinkteluControlAPIRestServiceGetDIDPremiumFeatures(params *ThinkteluControlAPIRestServiceGetDIDPremiumFeaturesParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceGetDIDPremiumFeaturesOK, error)

	ThinkteluControlAPIRestServiceGetSIPTrunk(params *ThinkteluControlAPIRestServiceGetSIPTrunkParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceGetSIPTrunkOK, error)

	ThinkteluControlAPIRestServiceGetSIPTrunkDID(params *ThinkteluControlAPIRestServiceGetSIPTrunkDIDParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceGetSIPTrunkDIDOK, error)

	ThinkteluControlAPIRestServiceGetSIPTrunkPlan(params *ThinkteluControlAPIRestServiceGetSIPTrunkPlanParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceGetSIPTrunkPlanOK, error)

	ThinkteluControlAPIRestServiceGetSubscriberPremiumFeatures(params *ThinkteluControlAPIRestServiceGetSubscriberPremiumFeaturesParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceGetSubscriberPremiumFeaturesOK, error)

	ThinkteluControlAPIRestServiceListSIPTrunkDids(params *ThinkteluControlAPIRestServiceListSIPTrunkDidsParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceListSIPTrunkDidsOK, error)

	ThinkteluControlAPIRestServiceListSIPTrunkLines(params *ThinkteluControlAPIRestServiceListSIPTrunkLinesParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceListSIPTrunkLinesOK, error)

	ThinkteluControlAPIRestServiceListSIPTrunkRateCenters(params *ThinkteluControlAPIRestServiceListSIPTrunkRateCentersParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceListSIPTrunkRateCentersOK, error)

	ThinkteluControlAPIRestServiceUpdateDIDPremiumFeatures(params *ThinkteluControlAPIRestServiceUpdateDIDPremiumFeaturesParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceUpdateDIDPremiumFeaturesOK, error)

	ThinkteluControlAPIRestServiceUpdateSIPTrunk(params *ThinkteluControlAPIRestServiceUpdateSIPTrunkParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceUpdateSIPTrunkOK, error)

	ThinkteluControlAPIRestServiceUpdateSIPTrunkDID(params *ThinkteluControlAPIRestServiceUpdateSIPTrunkDIDParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceUpdateSIPTrunkDIDOK, error)

	ThinkteluControlAPIRestServiceUpdateSIPTrunkDIDV2(params *ThinkteluControlAPIRestServiceUpdateSIPTrunkDIDV2Params, opts ...ClientOption) (*ThinktelUControlAPIRestServiceUpdateSIPTrunkDIDV2OK, error)

	ThinkteluControlAPIRestServiceUpdateSIPTrunkLine(params *ThinkteluControlAPIRestServiceUpdateSIPTrunkLineParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceUpdateSIPTrunkLineOK, error)

	ThinkteluControlAPIRestServiceUpdateSubscriberPremiumFeatures(params *ThinkteluControlAPIRestServiceUpdateSubscriberPremiumFeaturesParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceUpdateSubscriberPremiumFeaturesOK, error)

	ThinkteluControlAPIWebServiceAddSIPTrunk(params *ThinkteluControlAPIWebServiceAddSIPTrunkParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddSIPTrunkOK, error)

	ThinkteluControlAPIWebServiceListSIPTrunkPlans(params *ThinkteluControlAPIWebServiceListSIPTrunkPlansParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListSIPTrunkPlansOK, error)

	ThinkteluControlAPIWebServiceListSIPTrunkTypes(params *ThinkteluControlAPIWebServiceListSIPTrunkTypesParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListSIPTrunkTypesOK, error)

	ThinkteluControlAPIWebServiceListSIPTrunks(params *ThinkteluControlAPIWebServiceListSIPTrunksParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListSIPTrunksOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ThinkteluControlAPIRestServiceAddSIPTrunkDIDRanges orders SIP trunk d i ds by ranges
*/
func (a *Client) ThinkteluControlAPIRestServiceAddSIPTrunkDIDRanges(params *ThinkteluControlAPIRestServiceAddSIPTrunkDIDRangesParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceAddSIPTrunkDIDRangesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceAddSIPTrunkDIDRangesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.AddSipTrunkDidRanges",
		Method:             "POST",
		PathPattern:        "/SipTrunks/{number}/Dids/Ranges",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceAddSIPTrunkDIDRangesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceAddSIPTrunkDIDRangesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceAddSIPTrunkDIDRangesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceAddSIPTrunkDids orders SIP trunk d i ds
*/
func (a *Client) ThinkteluControlAPIRestServiceAddSIPTrunkDids(params *ThinkteluControlAPIRestServiceAddSIPTrunkDidsParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceAddSIPTrunkDidsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceAddSIPTrunkDidsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.AddSipTrunkDids",
		Method:             "POST",
		PathPattern:        "/SipTrunks/{number}/Dids",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceAddSIPTrunkDidsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceAddSIPTrunkDidsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceAddSIPTrunkDidsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceAddSIPTrunkLine orders SIP trunk line
*/
func (a *Client) ThinkteluControlAPIRestServiceAddSIPTrunkLine(params *ThinkteluControlAPIRestServiceAddSIPTrunkLineParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceAddSIPTrunkLineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceAddSIPTrunkLineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.AddSipTrunkLine",
		Method:             "POST",
		PathPattern:        "/SipTrunks/{number}/Lines",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceAddSIPTrunkLineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceAddSIPTrunkLineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceAddSIPTrunkLineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceAddSIPTrunkRateCenterDids orders SIP trunk d i ds by next available
*/
func (a *Client) ThinkteluControlAPIRestServiceAddSIPTrunkRateCenterDids(params *ThinkteluControlAPIRestServiceAddSIPTrunkRateCenterDidsParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceAddSIPTrunkRateCenterDidsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceAddSIPTrunkRateCenterDidsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.AddSipTrunkRateCenterDids",
		Method:             "POST",
		PathPattern:        "/SipTrunks/{number}/Dids/NextAvailable",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceAddSIPTrunkRateCenterDidsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceAddSIPTrunkRateCenterDidsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceAddSIPTrunkRateCenterDidsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceCancelSIPTrunk cancels SIP trunk

Cancelling a SIP trunk will also implicitly cancel all of the DIDs and SIP bindings that belong to it.
*/
func (a *Client) ThinkteluControlAPIRestServiceCancelSIPTrunk(params *ThinkteluControlAPIRestServiceCancelSIPTrunkParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceCancelSIPTrunkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceCancelSIPTrunkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.CancelSipTrunk",
		Method:             "DELETE",
		PathPattern:        "/SipTrunks/{number}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceCancelSIPTrunkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceCancelSIPTrunkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceCancelSIPTrunkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceCancelSIPTrunkDID cancels SIP trunk DID
*/
func (a *Client) ThinkteluControlAPIRestServiceCancelSIPTrunkDID(params *ThinkteluControlAPIRestServiceCancelSIPTrunkDIDParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceCancelSIPTrunkDIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceCancelSIPTrunkDIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.CancelSipTrunkDid",
		Method:             "DELETE",
		PathPattern:        "/SipTrunks/{number}/Dids/{did}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceCancelSIPTrunkDIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceCancelSIPTrunkDIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceCancelSIPTrunkDIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceCancelSIPTrunkLine cancels SIP trunk line
*/
func (a *Client) ThinkteluControlAPIRestServiceCancelSIPTrunkLine(params *ThinkteluControlAPIRestServiceCancelSIPTrunkLineParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceCancelSIPTrunkLineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceCancelSIPTrunkLineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.CancelSipTrunkLine",
		Method:             "DELETE",
		PathPattern:        "/SipTrunks/{number}/Lines/{SipBindingID}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceCancelSIPTrunkLineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceCancelSIPTrunkLineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceCancelSIPTrunkLineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceGetDIDPremiumFeatures retrieves premium features for DID
*/
func (a *Client) ThinkteluControlAPIRestServiceGetDIDPremiumFeatures(params *ThinkteluControlAPIRestServiceGetDIDPremiumFeaturesParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceGetDIDPremiumFeaturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceGetDIDPremiumFeaturesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.GetDIDPremiumFeatures",
		Method:             "GET",
		PathPattern:        "/SipTrunks/{pilot}/Dids/{number}/PremiumFeatures",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceGetDIDPremiumFeaturesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceGetDIDPremiumFeaturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceGetDIDPremiumFeaturesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceGetSIPTrunk retrieves SIP trunk
*/
func (a *Client) ThinkteluControlAPIRestServiceGetSIPTrunk(params *ThinkteluControlAPIRestServiceGetSIPTrunkParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceGetSIPTrunkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceGetSIPTrunkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.GetSipTrunk",
		Method:             "GET",
		PathPattern:        "/SipTrunks/{number}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceGetSIPTrunkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceGetSIPTrunkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceGetSIPTrunkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceGetSIPTrunkDID retrieves SIP trunk DID
*/
func (a *Client) ThinkteluControlAPIRestServiceGetSIPTrunkDID(params *ThinkteluControlAPIRestServiceGetSIPTrunkDIDParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceGetSIPTrunkDIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceGetSIPTrunkDIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.GetSipTrunkDid",
		Method:             "GET",
		PathPattern:        "/SipTrunks/{number}/Dids/{did}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceGetSIPTrunkDIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceGetSIPTrunkDIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceGetSIPTrunkDIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceGetSIPTrunkPlan retrieves SIP trunk offering
*/
func (a *Client) ThinkteluControlAPIRestServiceGetSIPTrunkPlan(params *ThinkteluControlAPIRestServiceGetSIPTrunkPlanParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceGetSIPTrunkPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceGetSIPTrunkPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.GetSipTrunkPlan",
		Method:             "GET",
		PathPattern:        "/SipTrunkPlans/{ID}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceGetSIPTrunkPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceGetSIPTrunkPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceGetSIPTrunkPlanDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceGetSubscriberPremiumFeatures retrieves premium features for Sip trunk
*/
func (a *Client) ThinkteluControlAPIRestServiceGetSubscriberPremiumFeatures(params *ThinkteluControlAPIRestServiceGetSubscriberPremiumFeaturesParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceGetSubscriberPremiumFeaturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceGetSubscriberPremiumFeaturesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.GetSubscriberPremiumFeatures",
		Method:             "GET",
		PathPattern:        "/SipTrunks/{pilot}/PremiumFeatures",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceGetSubscriberPremiumFeaturesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceGetSubscriberPremiumFeaturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceGetSubscriberPremiumFeaturesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceListSIPTrunkDids lists SIP trunk d i ds
*/
func (a *Client) ThinkteluControlAPIRestServiceListSIPTrunkDids(params *ThinkteluControlAPIRestServiceListSIPTrunkDidsParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceListSIPTrunkDidsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceListSIPTrunkDidsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.ListSipTrunkDids",
		Method:             "GET",
		PathPattern:        "/SipTrunks/{number}/Dids",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceListSIPTrunkDidsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceListSIPTrunkDidsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceListSIPTrunkDidsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceListSIPTrunkLines lists SIP trunk lines
*/
func (a *Client) ThinkteluControlAPIRestServiceListSIPTrunkLines(params *ThinkteluControlAPIRestServiceListSIPTrunkLinesParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceListSIPTrunkLinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceListSIPTrunkLinesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.ListSipTrunkLines",
		Method:             "GET",
		PathPattern:        "/SipTrunks/{number}/Lines",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceListSIPTrunkLinesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceListSIPTrunkLinesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceListSIPTrunkLinesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceListSIPTrunkRateCenters lists rate centers available for a SIP trunk
*/
func (a *Client) ThinkteluControlAPIRestServiceListSIPTrunkRateCenters(params *ThinkteluControlAPIRestServiceListSIPTrunkRateCentersParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceListSIPTrunkRateCentersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceListSIPTrunkRateCentersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.ListSipTrunkRateCenters",
		Method:             "GET",
		PathPattern:        "/SipTrunks/{number}/RateCenters",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceListSIPTrunkRateCentersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceListSIPTrunkRateCentersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceListSIPTrunkRateCentersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceUpdateDIDPremiumFeatures updates premium features for DID

This operation allows specifying which fields you want to update. It will not attempt to sync up all fields. This is useful if you don't know the existing values of the other fields, but you do know the values to set for specific fields, thus saving a round trip to first retrieve the current state of all fields before updating specific fields.
*/
func (a *Client) ThinkteluControlAPIRestServiceUpdateDIDPremiumFeatures(params *ThinkteluControlAPIRestServiceUpdateDIDPremiumFeaturesParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceUpdateDIDPremiumFeaturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceUpdateDIDPremiumFeaturesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.UpdateDIDPremiumFeatures",
		Method:             "PUT",
		PathPattern:        "/SipTrunks/{pilot}/Dids/{number}/PremiumFeatures",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceUpdateDIDPremiumFeaturesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceUpdateDIDPremiumFeaturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceUpdateDIDPremiumFeaturesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceUpdateSIPTrunk updates SIP trunk
*/
func (a *Client) ThinkteluControlAPIRestServiceUpdateSIPTrunk(params *ThinkteluControlAPIRestServiceUpdateSIPTrunkParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceUpdateSIPTrunkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceUpdateSIPTrunkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.UpdateSipTrunk",
		Method:             "PUT",
		PathPattern:        "/SipTrunks/{number}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceUpdateSIPTrunkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceUpdateSIPTrunkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceUpdateSIPTrunkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceUpdateSIPTrunkDID updates SIP trunk DID
*/
func (a *Client) ThinkteluControlAPIRestServiceUpdateSIPTrunkDID(params *ThinkteluControlAPIRestServiceUpdateSIPTrunkDIDParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceUpdateSIPTrunkDIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceUpdateSIPTrunkDIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.UpdateSipTrunkDid",
		Method:             "PUT",
		PathPattern:        "/SipTrunks/{number}/Dids/{did}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceUpdateSIPTrunkDIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceUpdateSIPTrunkDIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceUpdateSIPTrunkDIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceUpdateSIPTrunkDIDV2 updates SIP trunk DID

This newer operation allows specifying which fields you want to update. It will not attempt to sync up all fields that the older method will do. This is useful if you don't know the existing values of the other fields, but you do know the values to set for specific fields, thus saving a round trip to first retrieve the current state of all fields before updating specific fields.
*/
func (a *Client) ThinkteluControlAPIRestServiceUpdateSIPTrunkDIDV2(params *ThinkteluControlAPIRestServiceUpdateSIPTrunkDIDV2Params, opts ...ClientOption) (*ThinktelUControlAPIRestServiceUpdateSIPTrunkDIDV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceUpdateSIPTrunkDIDV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.UpdateSipTrunkDidV2",
		Method:             "PUT",
		PathPattern:        "/v2/SipTrunks/{number}/Dids/{did}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceUpdateSIPTrunkDIDV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceUpdateSIPTrunkDIDV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceUpdateSIPTrunkDIDV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceUpdateSIPTrunkLine updates SIP trunk line
*/
func (a *Client) ThinkteluControlAPIRestServiceUpdateSIPTrunkLine(params *ThinkteluControlAPIRestServiceUpdateSIPTrunkLineParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceUpdateSIPTrunkLineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceUpdateSIPTrunkLineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.UpdateSipTrunkLine",
		Method:             "PUT",
		PathPattern:        "/SipTrunks/{number}/Lines/{SipBindingID}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceUpdateSIPTrunkLineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceUpdateSIPTrunkLineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceUpdateSIPTrunkLineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceUpdateSubscriberPremiumFeatures updates premium features for Sip trunk
*/
func (a *Client) ThinkteluControlAPIRestServiceUpdateSubscriberPremiumFeatures(params *ThinkteluControlAPIRestServiceUpdateSubscriberPremiumFeaturesParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceUpdateSubscriberPremiumFeaturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceUpdateSubscriberPremiumFeaturesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.UpdateSubscriberPremiumFeatures",
		Method:             "PUT",
		PathPattern:        "/SipTrunks/{pilot}/PremiumFeatures",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceUpdateSubscriberPremiumFeaturesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceUpdateSubscriberPremiumFeaturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceUpdateSubscriberPremiumFeaturesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceAddSIPTrunk orders SIP trunk
*/
func (a *Client) ThinkteluControlAPIWebServiceAddSIPTrunk(params *ThinkteluControlAPIWebServiceAddSIPTrunkParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddSIPTrunkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceAddSIPTrunkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.AddSipTrunk",
		Method:             "POST",
		PathPattern:        "/SipTrunks",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceAddSIPTrunkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceAddSIPTrunkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceAddSIPTrunkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceListSIPTrunkPlans lists SIP trunk offerings
*/
func (a *Client) ThinkteluControlAPIWebServiceListSIPTrunkPlans(params *ThinkteluControlAPIWebServiceListSIPTrunkPlansParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListSIPTrunkPlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceListSIPTrunkPlansParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.ListSipTrunkPlans",
		Method:             "GET",
		PathPattern:        "/SipTrunkPlans",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceListSIPTrunkPlansReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceListSIPTrunkPlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceListSIPTrunkPlansDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceListSIPTrunkTypes lists media gateway models available for SIP trunks
*/
func (a *Client) ThinkteluControlAPIWebServiceListSIPTrunkTypes(params *ThinkteluControlAPIWebServiceListSIPTrunkTypesParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListSIPTrunkTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceListSIPTrunkTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.ListSipTrunkTypes",
		Method:             "GET",
		PathPattern:        "/SipTrunks/Types",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceListSIPTrunkTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceListSIPTrunkTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceListSIPTrunkTypesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceListSIPTrunks lists SIP trunks
*/
func (a *Client) ThinkteluControlAPIWebServiceListSIPTrunks(params *ThinkteluControlAPIWebServiceListSIPTrunksParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListSIPTrunksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceListSIPTrunksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.ListSipTrunks",
		Method:             "GET",
		PathPattern:        "/SipTrunks",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceListSIPTrunksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceListSIPTrunksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceListSIPTrunksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
