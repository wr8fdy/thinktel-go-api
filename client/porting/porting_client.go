// Code generated by go-swagger; DO NOT EDIT.

package porting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new porting API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new porting API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new porting API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for porting API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationXML sets the Content-Type header to "application/xml".
func WithContentTypeApplicationXML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/xml"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationXML sets the Accept header to "application/xml".
func WithAcceptApplicationXML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/xml"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	ThinkteluControlAPIWebServiceAddNumberPortBusinessLineV2(params *ThinkteluControlAPIWebServiceAddNumberPortBusinessLineV2Params, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddNumberPortBusinessLineV2OK, error)

	ThinkteluControlAPIWebServiceAddNumberPortBusinessPermanentCallForward(params *ThinkteluControlAPIWebServiceAddNumberPortBusinessPermanentCallForwardParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddNumberPortBusinessPermanentCallForwardOK, error)

	ThinkteluControlAPIWebServiceAddNumberPortDIDV2(params *ThinkteluControlAPIWebServiceAddNumberPortDIDV2Params, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddNumberPortDIDV2OK, error)

	ThinkteluControlAPIWebServiceAddNumberPortGeneralChildProduct(params *ThinkteluControlAPIWebServiceAddNumberPortGeneralChildProductParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddNumberPortGeneralChildProductOK, error)

	ThinkteluControlAPIWebServiceAddNumberPortGeneralProduct(params *ThinkteluControlAPIWebServiceAddNumberPortGeneralProductParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddNumberPortGeneralProductOK, error)

	ThinkteluControlAPIWebServiceAddNumberPortPermanentCallForwardV2(params *ThinkteluControlAPIWebServiceAddNumberPortPermanentCallForwardV2Params, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddNumberPortPermanentCallForwardV2OK, error)

	ThinkteluControlAPIWebServiceAddNumberPortResidentialLineV2(params *ThinkteluControlAPIWebServiceAddNumberPortResidentialLineV2Params, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddNumberPortResidentialLineV2OK, error)

	ThinkteluControlAPIWebServiceAddNumberPortTollFreeDIDV2(params *ThinkteluControlAPIWebServiceAddNumberPortTollFreeDIDV2Params, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddNumberPortTollFreeDIDV2OK, error)

	ThinkteluControlAPIWebServiceAddNumberPortTollFreePermanentCallForwardV2(params *ThinkteluControlAPIWebServiceAddNumberPortTollFreePermanentCallForwardV2Params, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddNumberPortTollFreePermanentCallForwardV2OK, error)

	ThinkteluControlAPIWebServiceAddNumberPortVirtualFax(params *ThinkteluControlAPIWebServiceAddNumberPortVirtualFaxParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddNumberPortVirtualFaxOK, error)

	ThinkteluControlAPIWebServiceCheckLNPNPANXX(params *ThinkteluControlAPIWebServiceCheckLNPNPANXXParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceCheckLNPNPANXXOK, error)

	ThinkteluControlAPIWebServiceGetLNPNPANXX(params *ThinkteluControlAPIWebServiceGetLNPNPANXXParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceGetLNPNPANXXOK, error)

	ThinkteluControlAPIWebServiceGetLNPRateCenters(params *ThinkteluControlAPIWebServiceGetLNPRateCentersParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceGetLNPRateCentersOK, error)

	ThinkteluControlAPIWebServiceGetPortInStatusByTelephoneNumber(params *ThinkteluControlAPIWebServiceGetPortInStatusByTelephoneNumberParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceGetPortInStatusByTelephoneNumberOK, error)

	ThinkteluControlAPIWebServiceGetPortInStatusByTicket(params *ThinkteluControlAPIWebServiceGetPortInStatusByTicketParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceGetPortInStatusByTicketOK, error)

	ThinkteluControlAPIWebServiceGetPortSysCustomerInfo(params *ThinkteluControlAPIWebServiceGetPortSysCustomerInfoParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceGetPortSysCustomerInfoOK, error)

	ThinkteluControlAPIWebServiceGetPortSysCustomerInfoByOrderID(params *ThinkteluControlAPIWebServiceGetPortSysCustomerInfoByOrderIDParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceGetPortSysCustomerInfoByOrderIDOK, error)

	ThinkteluControlAPIWebServiceGetPortSysCustomerInfoByRequestID(params *ThinkteluControlAPIWebServiceGetPortSysCustomerInfoByRequestIDParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceGetPortSysCustomerInfoByRequestIDOK, error)

	ThinkteluControlAPIWebServiceGetPortSysCustomerInfoByTn(params *ThinkteluControlAPIWebServiceGetPortSysCustomerInfoByTnParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceGetPortSysCustomerInfoByTnOK, error)

	ThinkteluControlAPIWebServiceBaseListNumberPortProviders(params *ThinkteluControlAPIWebServiceBaseListNumberPortProvidersParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceBaseListNumberPortProvidersOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ThinkteluControlAPIWebServiceAddNumberPortBusinessLineV2 submits port in request for business line

Account, PlanID and BusinessGroupID must be the same for all Lines
*/
func (a *Client) ThinkteluControlAPIWebServiceAddNumberPortBusinessLineV2(params *ThinkteluControlAPIWebServiceAddNumberPortBusinessLineV2Params, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddNumberPortBusinessLineV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceAddNumberPortBusinessLineV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.AddNumberPortBusinessLineV2",
		Method:             "POST",
		PathPattern:        "/v2/NumberPorts/Inbound/BusinessLines",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceAddNumberPortBusinessLineV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceAddNumberPortBusinessLineV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceAddNumberPortBusinessLineV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceAddNumberPortBusinessPermanentCallForward submits port in request for a business permanent call forward
*/
func (a *Client) ThinkteluControlAPIWebServiceAddNumberPortBusinessPermanentCallForward(params *ThinkteluControlAPIWebServiceAddNumberPortBusinessPermanentCallForwardParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddNumberPortBusinessPermanentCallForwardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceAddNumberPortBusinessPermanentCallForwardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.AddNumberPortBusinessPermanentCallForward",
		Method:             "POST",
		PathPattern:        "/NumberPorts/Inbound/BusinessPermanentCallForwards",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceAddNumberPortBusinessPermanentCallForwardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceAddNumberPortBusinessPermanentCallForwardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceAddNumberPortBusinessPermanentCallForwardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceAddNumberPortDIDV2 submits port in request for SIP trunk DID
*/
func (a *Client) ThinkteluControlAPIWebServiceAddNumberPortDIDV2(params *ThinkteluControlAPIWebServiceAddNumberPortDIDV2Params, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddNumberPortDIDV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceAddNumberPortDIDV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.AddNumberPortDIDV2",
		Method:             "POST",
		PathPattern:        "/v2/NumberPorts/Inbound/DIDs",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceAddNumberPortDIDV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceAddNumberPortDIDV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceAddNumberPortDIDV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceAddNumberPortGeneralChildProduct submits port in request for a general child product
*/
func (a *Client) ThinkteluControlAPIWebServiceAddNumberPortGeneralChildProduct(params *ThinkteluControlAPIWebServiceAddNumberPortGeneralChildProductParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddNumberPortGeneralChildProductOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceAddNumberPortGeneralChildProductParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.AddNumberPortGeneralChildProduct",
		Method:             "POST",
		PathPattern:        "/NumberPorts/Inbound/GeneralChildProducts",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceAddNumberPortGeneralChildProductReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceAddNumberPortGeneralChildProductOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceAddNumberPortGeneralChildProductDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceAddNumberPortGeneralProduct submits port in request for a general product
*/
func (a *Client) ThinkteluControlAPIWebServiceAddNumberPortGeneralProduct(params *ThinkteluControlAPIWebServiceAddNumberPortGeneralProductParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddNumberPortGeneralProductOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceAddNumberPortGeneralProductParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.AddNumberPortGeneralProduct",
		Method:             "POST",
		PathPattern:        "/NumberPorts/Inbound/GeneralProducts",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceAddNumberPortGeneralProductReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceAddNumberPortGeneralProductOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceAddNumberPortGeneralProductDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceAddNumberPortPermanentCallForwardV2 submits port in request for permanent call forward
*/
func (a *Client) ThinkteluControlAPIWebServiceAddNumberPortPermanentCallForwardV2(params *ThinkteluControlAPIWebServiceAddNumberPortPermanentCallForwardV2Params, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddNumberPortPermanentCallForwardV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceAddNumberPortPermanentCallForwardV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.AddNumberPortPermanentCallForwardV2",
		Method:             "POST",
		PathPattern:        "/v2/NumberPorts/Inbound/PermanentCallForwards",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceAddNumberPortPermanentCallForwardV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceAddNumberPortPermanentCallForwardV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceAddNumberPortPermanentCallForwardV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceAddNumberPortResidentialLineV2 submits port in request for residential line
*/
func (a *Client) ThinkteluControlAPIWebServiceAddNumberPortResidentialLineV2(params *ThinkteluControlAPIWebServiceAddNumberPortResidentialLineV2Params, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddNumberPortResidentialLineV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceAddNumberPortResidentialLineV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.AddNumberPortResidentialLineV2",
		Method:             "POST",
		PathPattern:        "/v2/NumberPorts/Inbound/ResidentialLines",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceAddNumberPortResidentialLineV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceAddNumberPortResidentialLineV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceAddNumberPortResidentialLineV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceAddNumberPortTollFreeDIDV2 submits port in request for a toll free SIP trunk DID
*/
func (a *Client) ThinkteluControlAPIWebServiceAddNumberPortTollFreeDIDV2(params *ThinkteluControlAPIWebServiceAddNumberPortTollFreeDIDV2Params, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddNumberPortTollFreeDIDV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceAddNumberPortTollFreeDIDV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.AddNumberPortTollFreeDIDV2",
		Method:             "POST",
		PathPattern:        "/v2/NumberPorts/Inbound/TollFree/DIDs",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceAddNumberPortTollFreeDIDV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceAddNumberPortTollFreeDIDV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceAddNumberPortTollFreeDIDV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceAddNumberPortTollFreePermanentCallForwardV2 submits port in request for a toll free permanent call forward
*/
func (a *Client) ThinkteluControlAPIWebServiceAddNumberPortTollFreePermanentCallForwardV2(params *ThinkteluControlAPIWebServiceAddNumberPortTollFreePermanentCallForwardV2Params, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddNumberPortTollFreePermanentCallForwardV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceAddNumberPortTollFreePermanentCallForwardV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.AddNumberPortTollFreePermanentCallForwardV2",
		Method:             "POST",
		PathPattern:        "/v2/NumberPorts/Inbound/TollFree/PermanentCallForwards",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceAddNumberPortTollFreePermanentCallForwardV2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceAddNumberPortTollFreePermanentCallForwardV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceAddNumberPortTollFreePermanentCallForwardV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceAddNumberPortVirtualFax submits port in request for a virtual fax
*/
func (a *Client) ThinkteluControlAPIWebServiceAddNumberPortVirtualFax(params *ThinkteluControlAPIWebServiceAddNumberPortVirtualFaxParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddNumberPortVirtualFaxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceAddNumberPortVirtualFaxParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.AddNumberPortVirtualFax",
		Method:             "POST",
		PathPattern:        "/NumberPorts/Inbound/VirtualFaxes",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceAddNumberPortVirtualFaxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceAddNumberPortVirtualFaxOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceAddNumberPortVirtualFaxDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceCheckLNPNPANXX checks if dialing plan prefix up to and including whole telephone number can be ported in
*/
func (a *Client) ThinkteluControlAPIWebServiceCheckLNPNPANXX(params *ThinkteluControlAPIWebServiceCheckLNPNPANXXParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceCheckLNPNPANXXOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceCheckLNPNPANXXParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.CheckLNPNPANXX",
		Method:             "POST",
		PathPattern:        "/NumberPorts/LNP/NPANXX/Check",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceCheckLNPNPANXXReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceCheckLNPNPANXXOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceCheckLNPNPANXXDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceGetLNPNPANXX lists dialing plan prefixes n p a n x xs with l n p local number portability
*/
func (a *Client) ThinkteluControlAPIWebServiceGetLNPNPANXX(params *ThinkteluControlAPIWebServiceGetLNPNPANXXParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceGetLNPNPANXXOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceGetLNPNPANXXParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.GetLNPNPANXX",
		Method:             "GET",
		PathPattern:        "/NumberPorts/LNP/NPANXX",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceGetLNPNPANXXReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceGetLNPNPANXXOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceGetLNPNPANXXDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceGetLNPRateCenters lists rate centers with l n p local number portability
*/
func (a *Client) ThinkteluControlAPIWebServiceGetLNPRateCenters(params *ThinkteluControlAPIWebServiceGetLNPRateCentersParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceGetLNPRateCentersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceGetLNPRateCentersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.GetLNPRateCenters",
		Method:             "GET",
		PathPattern:        "/NumberPorts/LNP/RateCenters",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceGetLNPRateCentersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceGetLNPRateCentersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceGetLNPRateCentersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceGetPortInStatusByTelephoneNumber retrieves status of port in ticket involving a given telephone number
*/
func (a *Client) ThinkteluControlAPIWebServiceGetPortInStatusByTelephoneNumber(params *ThinkteluControlAPIWebServiceGetPortInStatusByTelephoneNumberParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceGetPortInStatusByTelephoneNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceGetPortInStatusByTelephoneNumberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.GetPortInStatusByTelephoneNumber",
		Method:             "GET",
		PathPattern:        "/v2/NumberPorts/Inbound/Numbers/{tn}/PortInStatus",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceGetPortInStatusByTelephoneNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceGetPortInStatusByTelephoneNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceGetPortInStatusByTelephoneNumberDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceGetPortInStatusByTicket retrieves status of port in ticket
*/
func (a *Client) ThinkteluControlAPIWebServiceGetPortInStatusByTicket(params *ThinkteluControlAPIWebServiceGetPortInStatusByTicketParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceGetPortInStatusByTicketOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceGetPortInStatusByTicketParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.GetPortInStatusByTicket",
		Method:             "GET",
		PathPattern:        "/v2/NumberPorts/Inbound/Tickets/{ticketId}/PortInStatus",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceGetPortInStatusByTicketReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceGetPortInStatusByTicketOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceGetPortInStatusByTicketDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceGetPortSysCustomerInfo retrieves all orders info
*/
func (a *Client) ThinkteluControlAPIWebServiceGetPortSysCustomerInfo(params *ThinkteluControlAPIWebServiceGetPortSysCustomerInfoParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceGetPortSysCustomerInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceGetPortSysCustomerInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.GetPortSysCustomerInfo",
		Method:             "GET",
		PathPattern:        "/v2/NumberPorts/Inbound/Dashboard/PortInInfo",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceGetPortSysCustomerInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceGetPortSysCustomerInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceGetPortSysCustomerInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceGetPortSysCustomerInfoByOrderID retrieves order info with order id
*/
func (a *Client) ThinkteluControlAPIWebServiceGetPortSysCustomerInfoByOrderID(params *ThinkteluControlAPIWebServiceGetPortSysCustomerInfoByOrderIDParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceGetPortSysCustomerInfoByOrderIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceGetPortSysCustomerInfoByOrderIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.GetPortSysCustomerInfoByOrderId",
		Method:             "GET",
		PathPattern:        "/v2/NumberPorts/Inbound/Dashboard/PortInInfo/Orders/{OrderId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceGetPortSysCustomerInfoByOrderIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceGetPortSysCustomerInfoByOrderIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceGetPortSysCustomerInfoByOrderIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceGetPortSysCustomerInfoByRequestID retrieves order info with order id and request id
*/
func (a *Client) ThinkteluControlAPIWebServiceGetPortSysCustomerInfoByRequestID(params *ThinkteluControlAPIWebServiceGetPortSysCustomerInfoByRequestIDParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceGetPortSysCustomerInfoByRequestIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceGetPortSysCustomerInfoByRequestIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.GetPortSysCustomerInfoByRequestId",
		Method:             "GET",
		PathPattern:        "/v2/NumberPorts/Inbound/Dashboard/PortInInfo/Orders/{OrderId}/{RequestId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceGetPortSysCustomerInfoByRequestIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceGetPortSysCustomerInfoByRequestIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceGetPortSysCustomerInfoByRequestIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceGetPortSysCustomerInfoByTn retrieves order info with telephone number
*/
func (a *Client) ThinkteluControlAPIWebServiceGetPortSysCustomerInfoByTn(params *ThinkteluControlAPIWebServiceGetPortSysCustomerInfoByTnParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceGetPortSysCustomerInfoByTnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceGetPortSysCustomerInfoByTnParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.GetPortSysCustomerInfoByTn",
		Method:             "GET",
		PathPattern:        "/v2/NumberPorts/Inbound/Dashboard/PortInInfo/OrdersByNumber/{tn}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceGetPortSysCustomerInfoByTnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceGetPortSysCustomerInfoByTnOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceGetPortSysCustomerInfoByTnDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceBaseListNumberPortProviders lists providers aka other carriers
*/
func (a *Client) ThinkteluControlAPIWebServiceBaseListNumberPortProviders(params *ThinkteluControlAPIWebServiceBaseListNumberPortProvidersParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceBaseListNumberPortProvidersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceBaseListNumberPortProvidersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebServiceBase.ListNumberPortProviders",
		Method:             "GET",
		PathPattern:        "/NumberPorts/Providers",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceBaseListNumberPortProvidersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceBaseListNumberPortProvidersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceBaseListNumberPortProvidersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
