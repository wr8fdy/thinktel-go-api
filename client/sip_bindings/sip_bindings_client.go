// Code generated by go-swagger; DO NOT EDIT.

package sip_bindings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new sip bindings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new sip bindings API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new sip bindings API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for sip bindings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationXML sets the Content-Type header to "application/xml".
func WithContentTypeApplicationXML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/xml"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationXML sets the Accept header to "application/xml".
func WithAcceptApplicationXML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/xml"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	ThinkteluControlAPIRestServiceCancelSIPBinding(params *ThinkteluControlAPIRestServiceCancelSIPBindingParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceCancelSIPBindingOK, error)

	ThinkteluControlAPIRestServiceGetSIPBinding(params *ThinkteluControlAPIRestServiceGetSIPBindingParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceGetSIPBindingOK, error)

	ThinkteluControlAPIRestServiceUpdateSIPBinding(params *ThinkteluControlAPIRestServiceUpdateSIPBindingParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceUpdateSIPBindingOK, error)

	ThinkteluControlAPIWebServiceAddSIPBinding(params *ThinkteluControlAPIWebServiceAddSIPBindingParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddSIPBindingOK, error)

	ThinkteluControlAPIWebServiceListSIPBindings(params *ThinkteluControlAPIWebServiceListSIPBindingsParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListSIPBindingsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ThinkteluControlAPIRestServiceCancelSIPBinding cancels SIP binding
*/
func (a *Client) ThinkteluControlAPIRestServiceCancelSIPBinding(params *ThinkteluControlAPIRestServiceCancelSIPBindingParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceCancelSIPBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceCancelSIPBindingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.CancelSipBinding",
		Method:             "DELETE",
		PathPattern:        "/SipBindings/{ID}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceCancelSIPBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceCancelSIPBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceCancelSIPBindingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceGetSIPBinding retrieves SIP binding
*/
func (a *Client) ThinkteluControlAPIRestServiceGetSIPBinding(params *ThinkteluControlAPIRestServiceGetSIPBindingParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceGetSIPBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceGetSIPBindingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.GetSipBinding",
		Method:             "GET",
		PathPattern:        "/SipBindings/{ID}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceGetSIPBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceGetSIPBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceGetSIPBindingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceUpdateSIPBinding updates SIP binding
*/
func (a *Client) ThinkteluControlAPIRestServiceUpdateSIPBinding(params *ThinkteluControlAPIRestServiceUpdateSIPBindingParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceUpdateSIPBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceUpdateSIPBindingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.UpdateSipBinding",
		Method:             "PUT",
		PathPattern:        "/SipBindings/{ID}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceUpdateSIPBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceUpdateSIPBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceUpdateSIPBindingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceAddSIPBinding orders SIP binding
*/
func (a *Client) ThinkteluControlAPIWebServiceAddSIPBinding(params *ThinkteluControlAPIWebServiceAddSIPBindingParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddSIPBindingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceAddSIPBindingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.AddSipBinding",
		Method:             "POST",
		PathPattern:        "/SipBindings",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceAddSIPBindingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceAddSIPBindingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceAddSIPBindingDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceListSIPBindings lists SIP bindings
*/
func (a *Client) ThinkteluControlAPIWebServiceListSIPBindings(params *ThinkteluControlAPIWebServiceListSIPBindingsParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListSIPBindingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceListSIPBindingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.ListSipBindings",
		Method:             "GET",
		PathPattern:        "/SipBindings",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceListSIPBindingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceListSIPBindingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceListSIPBindingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
