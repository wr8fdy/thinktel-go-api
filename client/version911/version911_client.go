// Code generated by go-swagger; DO NOT EDIT.

package version911

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new version911 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new version911 API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new version911 API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for version911 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationXML sets the Content-Type header to "application/xml".
func WithContentTypeApplicationXML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/xml"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationXML sets the Accept header to "application/xml".
func WithAcceptApplicationXML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/xml"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	ThinkteluControlAPIRestServiceCancelV911(params *ThinkteluControlAPIRestServiceCancelV911Params, opts ...ClientOption) (*ThinktelUControlAPIRestServiceCancelV911OK, error)

	ThinkteluControlAPIRestServiceCancelV911v2(params *ThinkteluControlAPIRestServiceCancelV911v2Params, opts ...ClientOption) (*ThinktelUControlAPIRestServiceCancelV911v2OK, error)

	ThinkteluControlAPIRestServiceGetV911(params *ThinkteluControlAPIRestServiceGetV911Params, opts ...ClientOption) (*ThinktelUControlAPIRestServiceGetV911OK, error)

	ThinkteluControlAPIRestServiceGetV911v2(params *ThinkteluControlAPIRestServiceGetV911v2Params, opts ...ClientOption) (*ThinktelUControlAPIRestServiceGetV911v2OK, error)

	ThinkteluControlAPIRestServiceUpdateV911(params *ThinkteluControlAPIRestServiceUpdateV911Params, opts ...ClientOption) (*ThinktelUControlAPIRestServiceUpdateV911OK, error)

	ThinkteluControlAPIRestServiceUpdateV911v2(params *ThinkteluControlAPIRestServiceUpdateV911v2Params, opts ...ClientOption) (*ThinktelUControlAPIRestServiceUpdateV911v2OK, error)

	ThinkteluControlAPIWebServiceAddV911(params *ThinkteluControlAPIWebServiceAddV911Params, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddV911OK, error)

	ThinkteluControlAPIWebServiceAddV911v2(params *ThinkteluControlAPIWebServiceAddV911v2Params, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddV911v2OK, error)

	ThinkteluControlAPIWebServiceListV911s(params *ThinkteluControlAPIWebServiceListV911sParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListV911sOK, error)

	ThinkteluControlAPIWebServiceListV911sv2(params *ThinkteluControlAPIWebServiceListV911sv2Params, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListV911sv2OK, error)

	ThinkteluControlAPIWebServiceVerifyV911(params *ThinkteluControlAPIWebServiceVerifyV911Params, opts ...ClientOption) (*ThinktelUControlAPIWebServiceVerifyV911OK, error)

	ThinkteluControlAPIWebServiceVerifyV911v2(params *ThinkteluControlAPIWebServiceVerifyV911v2Params, opts ...ClientOption) (*ThinktelUControlAPIWebServiceVerifyV911v2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ThinkteluControlAPIRestServiceCancelV911 deletes v911 contact information record
*/
func (a *Client) ThinkteluControlAPIRestServiceCancelV911(params *ThinkteluControlAPIRestServiceCancelV911Params, opts ...ClientOption) (*ThinktelUControlAPIRestServiceCancelV911OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceCancelV911Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.CancelV911",
		Method:             "DELETE",
		PathPattern:        "/V911s/{number}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceCancelV911Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceCancelV911OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceCancelV911Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceCancelV911v2 deletes v911 contact information record
*/
func (a *Client) ThinkteluControlAPIRestServiceCancelV911v2(params *ThinkteluControlAPIRestServiceCancelV911v2Params, opts ...ClientOption) (*ThinktelUControlAPIRestServiceCancelV911v2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceCancelV911v2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.CancelV911v2",
		Method:             "DELETE",
		PathPattern:        "/v2/V911s/{number}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceCancelV911v2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceCancelV911v2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceCancelV911v2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceGetV911 retrieves v911 contact information record
*/
func (a *Client) ThinkteluControlAPIRestServiceGetV911(params *ThinkteluControlAPIRestServiceGetV911Params, opts ...ClientOption) (*ThinktelUControlAPIRestServiceGetV911OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceGetV911Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.GetV911",
		Method:             "GET",
		PathPattern:        "/V911s/{number}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceGetV911Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceGetV911OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceGetV911Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceGetV911v2 retrieves v911 contact information with pending port flag record
*/
func (a *Client) ThinkteluControlAPIRestServiceGetV911v2(params *ThinkteluControlAPIRestServiceGetV911v2Params, opts ...ClientOption) (*ThinktelUControlAPIRestServiceGetV911v2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceGetV911v2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.GetV911v2",
		Method:             "GET",
		PathPattern:        "/v2/V911s/{number}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceGetV911v2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceGetV911v2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceGetV911v2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceUpdateV911 updates v911 contact information record
*/
func (a *Client) ThinkteluControlAPIRestServiceUpdateV911(params *ThinkteluControlAPIRestServiceUpdateV911Params, opts ...ClientOption) (*ThinktelUControlAPIRestServiceUpdateV911OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceUpdateV911Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.UpdateV911",
		Method:             "PUT",
		PathPattern:        "/V911s/{number}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceUpdateV911Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceUpdateV911OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceUpdateV911Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceUpdateV911v2 updates v911 contact information with pending port flag record
*/
func (a *Client) ThinkteluControlAPIRestServiceUpdateV911v2(params *ThinkteluControlAPIRestServiceUpdateV911v2Params, opts ...ClientOption) (*ThinktelUControlAPIRestServiceUpdateV911v2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceUpdateV911v2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.UpdateV911v2",
		Method:             "PUT",
		PathPattern:        "/v2/V911s/{number}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceUpdateV911v2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceUpdateV911v2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceUpdateV911v2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceAddV911 creates v911 contact information record
*/
func (a *Client) ThinkteluControlAPIWebServiceAddV911(params *ThinkteluControlAPIWebServiceAddV911Params, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddV911OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceAddV911Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.AddV911",
		Method:             "POST",
		PathPattern:        "/V911s",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceAddV911Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceAddV911OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceAddV911Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceAddV911v2 creates v911 contact information with pending port flag record
*/
func (a *Client) ThinkteluControlAPIWebServiceAddV911v2(params *ThinkteluControlAPIWebServiceAddV911v2Params, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddV911v2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceAddV911v2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.AddV911v2",
		Method:             "POST",
		PathPattern:        "/v2/V911s",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceAddV911v2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceAddV911v2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceAddV911v2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceListV911s lists v911 contact information records
*/
func (a *Client) ThinkteluControlAPIWebServiceListV911s(params *ThinkteluControlAPIWebServiceListV911sParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListV911sOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceListV911sParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.ListV911s",
		Method:             "GET",
		PathPattern:        "/V911s",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceListV911sReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceListV911sOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceListV911sDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceListV911sv2 lists v911 contact information with pending port flag records
*/
func (a *Client) ThinkteluControlAPIWebServiceListV911sv2(params *ThinkteluControlAPIWebServiceListV911sv2Params, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListV911sv2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceListV911sv2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.ListV911sv2",
		Method:             "GET",
		PathPattern:        "/v2/V911s",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceListV911sv2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceListV911sv2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceListV911sv2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceVerifyV911 verifies v911 contact information record
*/
func (a *Client) ThinkteluControlAPIWebServiceVerifyV911(params *ThinkteluControlAPIWebServiceVerifyV911Params, opts ...ClientOption) (*ThinktelUControlAPIWebServiceVerifyV911OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceVerifyV911Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.VerifyV911",
		Method:             "POST",
		PathPattern:        "/V911s/Verify",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceVerifyV911Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceVerifyV911OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceVerifyV911Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceVerifyV911v2 verifies v911 contact information with pending port flag record
*/
func (a *Client) ThinkteluControlAPIWebServiceVerifyV911v2(params *ThinkteluControlAPIWebServiceVerifyV911v2Params, opts ...ClientOption) (*ThinktelUControlAPIWebServiceVerifyV911v2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceVerifyV911v2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.VerifyV911v2",
		Method:             "POST",
		PathPattern:        "/v2/V911s/Verify",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceVerifyV911v2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceVerifyV911v2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceVerifyV911v2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
