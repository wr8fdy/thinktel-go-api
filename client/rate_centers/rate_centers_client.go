// Code generated by go-swagger; DO NOT EDIT.

package rate_centers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new rate centers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new rate centers API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new rate centers API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for rate centers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationXML sets the Content-Type header to "application/xml".
func WithContentTypeApplicationXML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/xml"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationXML sets the Accept header to "application/xml".
func WithAcceptApplicationXML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/xml"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	ThinkteluControlAPIWebServiceGetRateCenter(params *ThinkteluControlAPIWebServiceGetRateCenterParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceGetRateCenterOK, error)

	ThinkteluControlAPIWebServiceGetRateCenterForNpaNxx(params *ThinkteluControlAPIWebServiceGetRateCenterForNpaNxxParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceGetRateCenterForNpaNxxOK, error)

	ThinkteluControlAPIWebServiceListAvailableNPANXX(params *ThinkteluControlAPIWebServiceListAvailableNPANXXParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListAvailableNPANXXOK, error)

	ThinkteluControlAPIWebServiceListCountryNPAs(params *ThinkteluControlAPIWebServiceListCountryNPAsParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListCountryNPAsOK, error)

	ThinkteluControlAPIWebServiceListCountryProvinceRateCenters(params *ThinkteluControlAPIWebServiceListCountryProvinceRateCentersParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListCountryProvinceRateCentersOK, error)

	ThinkteluControlAPIWebServiceListCountryRateCenters(params *ThinkteluControlAPIWebServiceListCountryRateCentersParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListCountryRateCentersOK, error)

	ThinkteluControlAPIWebServiceListNPARateCenters(params *ThinkteluControlAPIWebServiceListNPARateCentersParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListNPARateCentersOK, error)

	ThinkteluControlAPIWebServiceListRateCenterBlocks(params *ThinkteluControlAPIWebServiceListRateCenterBlocksParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListRateCenterBlocksOK, error)

	ThinkteluControlAPIWebServiceListRateCenterNext10(params *ThinkteluControlAPIWebServiceListRateCenterNext10Params, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListRateCenterNext10OK, error)

	ThinkteluControlAPIWebServiceListRateCenters(params *ThinkteluControlAPIWebServiceListRateCentersParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListRateCentersOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ThinkteluControlAPIWebServiceGetRateCenter retrieves rate center
*/
func (a *Client) ThinkteluControlAPIWebServiceGetRateCenter(params *ThinkteluControlAPIWebServiceGetRateCenterParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceGetRateCenterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceGetRateCenterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.GetRateCenter",
		Method:             "GET",
		PathPattern:        "/RateCenters/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceGetRateCenterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceGetRateCenterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceGetRateCenterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceGetRateCenterForNpaNxx retrieves rate center for a n p a numbering plan area code and n x x central office code
*/
func (a *Client) ThinkteluControlAPIWebServiceGetRateCenterForNpaNxx(params *ThinkteluControlAPIWebServiceGetRateCenterForNpaNxxParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceGetRateCenterForNpaNxxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceGetRateCenterForNpaNxxParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.GetRateCenterForNpaNxx",
		Method:             "GET",
		PathPattern:        "/NPAs/{npa}/NXXs/{nxx}/RateCenter",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceGetRateCenterForNpaNxxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceGetRateCenterForNpaNxxOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceGetRateCenterForNpaNxxDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceListAvailableNPANXX lists of available dialing plan prefixes n p a n x xs for a country
*/
func (a *Client) ThinkteluControlAPIWebServiceListAvailableNPANXX(params *ThinkteluControlAPIWebServiceListAvailableNPANXXParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListAvailableNPANXXOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceListAvailableNPANXXParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.ListAvailableNPANXX",
		Method:             "GET",
		PathPattern:        "/RateCenters/Country/{country_alpha_2}/Available/NPANXX",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceListAvailableNPANXXReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceListAvailableNPANXXOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceListAvailableNPANXXDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceListCountryNPAs lists numbering plan areas within a country
*/
func (a *Client) ThinkteluControlAPIWebServiceListCountryNPAs(params *ThinkteluControlAPIWebServiceListCountryNPAsParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListCountryNPAsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceListCountryNPAsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.ListCountryNPAs",
		Method:             "GET",
		PathPattern:        "/RateCenters/Country/{country_alpha_2}/NPAs",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceListCountryNPAsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceListCountryNPAsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceListCountryNPAsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceListCountryProvinceRateCenters lists rate centers within a subdivision of a country
*/
func (a *Client) ThinkteluControlAPIWebServiceListCountryProvinceRateCenters(params *ThinkteluControlAPIWebServiceListCountryProvinceRateCentersParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListCountryProvinceRateCentersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceListCountryProvinceRateCentersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.ListCountryProvinceRateCenters",
		Method:             "GET",
		PathPattern:        "/RateCenters/Country/{country_alpha_2}/Province/{province_alpha_2}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceListCountryProvinceRateCentersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceListCountryProvinceRateCentersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceListCountryProvinceRateCentersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceListCountryRateCenters lists rate centers within a country
*/
func (a *Client) ThinkteluControlAPIWebServiceListCountryRateCenters(params *ThinkteluControlAPIWebServiceListCountryRateCentersParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListCountryRateCentersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceListCountryRateCentersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.ListCountryRateCenters",
		Method:             "GET",
		PathPattern:        "/RateCenters/Country/{country_alpha_2}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceListCountryRateCentersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceListCountryRateCentersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceListCountryRateCentersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceListNPARateCenters lists rate centers for an n p a numbering plan area code
*/
func (a *Client) ThinkteluControlAPIWebServiceListNPARateCenters(params *ThinkteluControlAPIWebServiceListNPARateCentersParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListNPARateCentersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceListNPARateCentersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.ListNPARateCenters",
		Method:             "GET",
		PathPattern:        "/RateCenters/NPA/{npa}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceListNPARateCentersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceListNPARateCentersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceListNPARateCentersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceListRateCenterBlocks lists telephone number blocks for a rate center
*/
func (a *Client) ThinkteluControlAPIWebServiceListRateCenterBlocks(params *ThinkteluControlAPIWebServiceListRateCenterBlocksParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListRateCenterBlocksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceListRateCenterBlocksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.ListRateCenterBlocks",
		Method:             "GET",
		PathPattern:        "/RateCenters/{name}/Blocks",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceListRateCenterBlocksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceListRateCenterBlocksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceListRateCenterBlocksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceListRateCenterNext10 lists next ten available telephone numbers for a rate center
*/
func (a *Client) ThinkteluControlAPIWebServiceListRateCenterNext10(params *ThinkteluControlAPIWebServiceListRateCenterNext10Params, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListRateCenterNext10OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceListRateCenterNext10Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.ListRateCenterNext10",
		Method:             "GET",
		PathPattern:        "/RateCenters/{name}/Next10",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceListRateCenterNext10Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceListRateCenterNext10OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceListRateCenterNext10Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceListRateCenters lists rate centers
*/
func (a *Client) ThinkteluControlAPIWebServiceListRateCenters(params *ThinkteluControlAPIWebServiceListRateCentersParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListRateCentersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceListRateCentersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.ListRateCenters",
		Method:             "GET",
		PathPattern:        "/RateCenters",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceListRateCentersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceListRateCentersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceListRateCentersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
