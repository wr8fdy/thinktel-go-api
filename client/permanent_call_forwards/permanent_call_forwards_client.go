// Code generated by go-swagger; DO NOT EDIT.

package permanent_call_forwards

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new permanent call forwards API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new permanent call forwards API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new permanent call forwards API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for permanent call forwards API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationXML sets the Content-Type header to "application/xml".
func WithContentTypeApplicationXML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/xml"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationXML sets the Accept header to "application/xml".
func WithAcceptApplicationXML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/xml"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	ThinkteluControlAPIRestServiceCancelPermanentCallForward(params *ThinkteluControlAPIRestServiceCancelPermanentCallForwardParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceCancelPermanentCallForwardOK, error)

	ThinkteluControlAPIRestServiceGetPermanentCallForward(params *ThinkteluControlAPIRestServiceGetPermanentCallForwardParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceGetPermanentCallForwardOK, error)

	ThinkteluControlAPIRestServiceGetPermanentCallForwardPlan(params *ThinkteluControlAPIRestServiceGetPermanentCallForwardPlanParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceGetPermanentCallForwardPlanOK, error)

	ThinkteluControlAPIRestServiceUpdatePermanentCallForward(params *ThinkteluControlAPIRestServiceUpdatePermanentCallForwardParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceUpdatePermanentCallForwardOK, error)

	ThinkteluControlAPIWebServiceAddPermanentCallForward(params *ThinkteluControlAPIWebServiceAddPermanentCallForwardParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddPermanentCallForwardOK, error)

	ThinkteluControlAPIWebServiceListPermanentCallForwardPlans(params *ThinkteluControlAPIWebServiceListPermanentCallForwardPlansParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListPermanentCallForwardPlansOK, error)

	ThinkteluControlAPIWebServiceListPermanentCallForwards(params *ThinkteluControlAPIWebServiceListPermanentCallForwardsParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListPermanentCallForwardsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ThinkteluControlAPIRestServiceCancelPermanentCallForward cancels permanent call forward
*/
func (a *Client) ThinkteluControlAPIRestServiceCancelPermanentCallForward(params *ThinkteluControlAPIRestServiceCancelPermanentCallForwardParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceCancelPermanentCallForwardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceCancelPermanentCallForwardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.CancelPermanentCallForward",
		Method:             "DELETE",
		PathPattern:        "/PermanentCallForwards/{number}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceCancelPermanentCallForwardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceCancelPermanentCallForwardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceCancelPermanentCallForwardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceGetPermanentCallForward retrieves permanent call forward
*/
func (a *Client) ThinkteluControlAPIRestServiceGetPermanentCallForward(params *ThinkteluControlAPIRestServiceGetPermanentCallForwardParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceGetPermanentCallForwardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceGetPermanentCallForwardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.GetPermanentCallForward",
		Method:             "GET",
		PathPattern:        "/PermanentCallForwards/{number}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceGetPermanentCallForwardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceGetPermanentCallForwardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceGetPermanentCallForwardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceGetPermanentCallForwardPlan retrieves permanent call forward offering
*/
func (a *Client) ThinkteluControlAPIRestServiceGetPermanentCallForwardPlan(params *ThinkteluControlAPIRestServiceGetPermanentCallForwardPlanParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceGetPermanentCallForwardPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceGetPermanentCallForwardPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.GetPermanentCallForwardPlan",
		Method:             "GET",
		PathPattern:        "/PermanentCallForwardPlans/{ID}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceGetPermanentCallForwardPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceGetPermanentCallForwardPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceGetPermanentCallForwardPlanDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIRestServiceUpdatePermanentCallForward updates permanent call forward
*/
func (a *Client) ThinkteluControlAPIRestServiceUpdatePermanentCallForward(params *ThinkteluControlAPIRestServiceUpdatePermanentCallForwardParams, opts ...ClientOption) (*ThinktelUControlAPIRestServiceUpdatePermanentCallForwardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIRestServiceUpdatePermanentCallForwardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.RestService.UpdatePermanentCallForward",
		Method:             "PUT",
		PathPattern:        "/PermanentCallForwards/{number}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIRestServiceUpdatePermanentCallForwardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIRestServiceUpdatePermanentCallForwardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIRestServiceUpdatePermanentCallForwardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceAddPermanentCallForward orders permanent call forward
*/
func (a *Client) ThinkteluControlAPIWebServiceAddPermanentCallForward(params *ThinkteluControlAPIWebServiceAddPermanentCallForwardParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceAddPermanentCallForwardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceAddPermanentCallForwardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.AddPermanentCallForward",
		Method:             "POST",
		PathPattern:        "/PermanentCallForwards",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceAddPermanentCallForwardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceAddPermanentCallForwardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceAddPermanentCallForwardDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceListPermanentCallForwardPlans lists permanent call forward offerings
*/
func (a *Client) ThinkteluControlAPIWebServiceListPermanentCallForwardPlans(params *ThinkteluControlAPIWebServiceListPermanentCallForwardPlansParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListPermanentCallForwardPlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceListPermanentCallForwardPlansParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.ListPermanentCallForwardPlans",
		Method:             "GET",
		PathPattern:        "/PermanentCallForwardPlans",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceListPermanentCallForwardPlansReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceListPermanentCallForwardPlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceListPermanentCallForwardPlansDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ThinkteluControlAPIWebServiceListPermanentCallForwards lists permanent call forwards
*/
func (a *Client) ThinkteluControlAPIWebServiceListPermanentCallForwards(params *ThinkteluControlAPIWebServiceListPermanentCallForwardsParams, opts ...ClientOption) (*ThinktelUControlAPIWebServiceListPermanentCallForwardsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThinkteluControlAPIWebServiceListPermanentCallForwardsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Thinktel.uControl.Api.WebService.ListPermanentCallForwards",
		Method:             "GET",
		PathPattern:        "/PermanentCallForwards",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThinkteluControlAPIWebServiceListPermanentCallForwardsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThinktelUControlAPIWebServiceListPermanentCallForwardsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ThinkteluControlAPIWebServiceListPermanentCallForwardsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
