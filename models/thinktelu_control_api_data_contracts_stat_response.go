// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ThinkteluControlAPIDataContractsStatResponse thinktel u control Api data contracts stat response
//
// swagger:model Thinktel.uControl.Api.DataContracts.StatResponse
type ThinkteluControlAPIDataContractsStatResponse struct {

	// calls
	// Required: true
	Calls *int64 `json:"Calls"`

	// calls canada
	// Required: true
	CallsCanada *int64 `json:"CallsCanada"`

	// calls completed
	// Required: true
	CallsCompleted *int64 `json:"CallsCompleted"`

	// calls completed reseller
	// Required: true
	CallsCompletedReseller *int64 `json:"CallsCompletedReseller"`

	// calls incoming
	// Required: true
	CallsIncoming *int64 `json:"CallsIncoming"`

	// calls incoming toll
	// Required: true
	CallsIncomingToll *int64 `json:"CallsIncomingToll"`

	// calls international
	// Required: true
	CallsInternational *int64 `json:"CallsInternational"`

	// calls itc canada
	// Required: true
	CallsItcCanada *int64 `json:"CallsItcCanada"`

	// calls itc usa
	// Required: true
	CallsItcUsa *int64 `json:"CallsItcUsa"`

	// calls local
	// Required: true
	CallsLocal *int64 `json:"CallsLocal"`

	// calls on net
	// Required: true
	CallsOnNet *int64 `json:"CallsOnNet"`

	// calls outgoing
	// Required: true
	CallsOutgoing *int64 `json:"CallsOutgoing"`

	// calls usa
	// Required: true
	CallsUsa *int64 `json:"CallsUsa"`

	// channel max
	ChannelMax int32 `json:"ChannelMax,omitempty"`

	// channel max actual
	ChannelMaxActual int32 `json:"ChannelMaxActual,omitempty"`

	// channel max canada
	ChannelMaxCanada int32 `json:"ChannelMaxCanada,omitempty"`

	// channel max incoming
	ChannelMaxIncoming int32 `json:"ChannelMaxIncoming,omitempty"`

	// channel max incoming toll
	ChannelMaxIncomingToll int32 `json:"ChannelMaxIncomingToll,omitempty"`

	// channel max international
	ChannelMaxInternational int32 `json:"ChannelMaxInternational,omitempty"`

	// channel max itc canada
	ChannelMaxItcCanada int32 `json:"ChannelMaxItcCanada,omitempty"`

	// channel max itc usa
	ChannelMaxItcUsa int32 `json:"ChannelMaxItcUsa,omitempty"`

	// channel max local
	ChannelMaxLocal int32 `json:"ChannelMaxLocal,omitempty"`

	// channel max on net
	ChannelMaxOnNet int32 `json:"ChannelMaxOnNet,omitempty"`

	// channel max outgoing
	ChannelMaxOutgoing int32 `json:"ChannelMaxOutgoing,omitempty"`

	// channel max time
	// Format: date-time
	ChannelMaxTime strfmt.DateTime `json:"ChannelMaxTime,omitempty"`

	// channel max usa
	ChannelMaxUsa int32 `json:"ChannelMaxUsa,omitempty"`

	// duration
	// Required: true
	Duration *int64 `json:"Duration"`

	// duration canada
	// Required: true
	DurationCanada *int64 `json:"DurationCanada"`

	// duration incoming
	// Required: true
	DurationIncoming *int64 `json:"DurationIncoming"`

	// duration incoming toll
	// Required: true
	DurationIncomingToll *int64 `json:"DurationIncomingToll"`

	// duration international
	// Required: true
	DurationInternational *int64 `json:"DurationInternational"`

	// duration itc canada
	// Required: true
	DurationItcCanada *int64 `json:"DurationItcCanada"`

	// duration itc usa
	// Required: true
	DurationItcUsa *int64 `json:"DurationItcUsa"`

	// duration local
	// Required: true
	DurationLocal *int64 `json:"DurationLocal"`

	// duration on net
	// Required: true
	DurationOnNet *int64 `json:"DurationOnNet"`

	// duration outgoing
	// Required: true
	DurationOutgoing *int64 `json:"DurationOutgoing"`

	// duration usa
	// Required: true
	DurationUsa *int64 `json:"DurationUsa"`

	// rate
	// Required: true
	Rate *float64 `json:"Rate"`

	// rate canada
	// Required: true
	RateCanada *float64 `json:"RateCanada"`

	// rate incoming
	// Required: true
	RateIncoming *float64 `json:"RateIncoming"`

	// rate incoming toll
	// Required: true
	RateIncomingToll *float64 `json:"RateIncomingToll"`

	// rate international
	// Required: true
	RateInternational *float64 `json:"RateInternational"`

	// rate itc canada
	// Required: true
	RateItcCanada *float64 `json:"RateItcCanada"`

	// rate itc usa
	// Required: true
	RateItcUsa *float64 `json:"RateItcUsa"`

	// rate local
	// Required: true
	RateLocal *float64 `json:"RateLocal"`

	// rate on net
	// Required: true
	RateOnNet *float64 `json:"RateOnNet"`

	// rate outgoing
	// Required: true
	RateOutgoing *float64 `json:"RateOutgoing"`

	// rate usa
	// Required: true
	RateUsa *float64 `json:"RateUsa"`
}

// Validate validates this thinktel u control Api data contracts stat response
func (m *ThinkteluControlAPIDataContractsStatResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCalls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallsCanada(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallsCompleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallsCompletedReseller(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallsIncoming(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallsIncomingToll(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallsInternational(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallsItcCanada(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallsItcUsa(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallsLocal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallsOnNet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallsOutgoing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallsUsa(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelMaxTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDurationCanada(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDurationIncoming(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDurationIncomingToll(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDurationInternational(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDurationItcCanada(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDurationItcUsa(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDurationLocal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDurationOnNet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDurationOutgoing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDurationUsa(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateCanada(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateIncoming(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateIncomingToll(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateInternational(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateItcCanada(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateItcUsa(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateLocal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateOnNet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateOutgoing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateUsa(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateCalls(formats strfmt.Registry) error {

	if err := validate.Required("Calls", "body", m.Calls); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateCallsCanada(formats strfmt.Registry) error {

	if err := validate.Required("CallsCanada", "body", m.CallsCanada); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateCallsCompleted(formats strfmt.Registry) error {

	if err := validate.Required("CallsCompleted", "body", m.CallsCompleted); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateCallsCompletedReseller(formats strfmt.Registry) error {

	if err := validate.Required("CallsCompletedReseller", "body", m.CallsCompletedReseller); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateCallsIncoming(formats strfmt.Registry) error {

	if err := validate.Required("CallsIncoming", "body", m.CallsIncoming); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateCallsIncomingToll(formats strfmt.Registry) error {

	if err := validate.Required("CallsIncomingToll", "body", m.CallsIncomingToll); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateCallsInternational(formats strfmt.Registry) error {

	if err := validate.Required("CallsInternational", "body", m.CallsInternational); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateCallsItcCanada(formats strfmt.Registry) error {

	if err := validate.Required("CallsItcCanada", "body", m.CallsItcCanada); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateCallsItcUsa(formats strfmt.Registry) error {

	if err := validate.Required("CallsItcUsa", "body", m.CallsItcUsa); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateCallsLocal(formats strfmt.Registry) error {

	if err := validate.Required("CallsLocal", "body", m.CallsLocal); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateCallsOnNet(formats strfmt.Registry) error {

	if err := validate.Required("CallsOnNet", "body", m.CallsOnNet); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateCallsOutgoing(formats strfmt.Registry) error {

	if err := validate.Required("CallsOutgoing", "body", m.CallsOutgoing); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateCallsUsa(formats strfmt.Registry) error {

	if err := validate.Required("CallsUsa", "body", m.CallsUsa); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateChannelMaxTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ChannelMaxTime) { // not required
		return nil
	}

	if err := validate.FormatOf("ChannelMaxTime", "body", "date-time", m.ChannelMaxTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateDuration(formats strfmt.Registry) error {

	if err := validate.Required("Duration", "body", m.Duration); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateDurationCanada(formats strfmt.Registry) error {

	if err := validate.Required("DurationCanada", "body", m.DurationCanada); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateDurationIncoming(formats strfmt.Registry) error {

	if err := validate.Required("DurationIncoming", "body", m.DurationIncoming); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateDurationIncomingToll(formats strfmt.Registry) error {

	if err := validate.Required("DurationIncomingToll", "body", m.DurationIncomingToll); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateDurationInternational(formats strfmt.Registry) error {

	if err := validate.Required("DurationInternational", "body", m.DurationInternational); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateDurationItcCanada(formats strfmt.Registry) error {

	if err := validate.Required("DurationItcCanada", "body", m.DurationItcCanada); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateDurationItcUsa(formats strfmt.Registry) error {

	if err := validate.Required("DurationItcUsa", "body", m.DurationItcUsa); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateDurationLocal(formats strfmt.Registry) error {

	if err := validate.Required("DurationLocal", "body", m.DurationLocal); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateDurationOnNet(formats strfmt.Registry) error {

	if err := validate.Required("DurationOnNet", "body", m.DurationOnNet); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateDurationOutgoing(formats strfmt.Registry) error {

	if err := validate.Required("DurationOutgoing", "body", m.DurationOutgoing); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateDurationUsa(formats strfmt.Registry) error {

	if err := validate.Required("DurationUsa", "body", m.DurationUsa); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateRate(formats strfmt.Registry) error {

	if err := validate.Required("Rate", "body", m.Rate); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateRateCanada(formats strfmt.Registry) error {

	if err := validate.Required("RateCanada", "body", m.RateCanada); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateRateIncoming(formats strfmt.Registry) error {

	if err := validate.Required("RateIncoming", "body", m.RateIncoming); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateRateIncomingToll(formats strfmt.Registry) error {

	if err := validate.Required("RateIncomingToll", "body", m.RateIncomingToll); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateRateInternational(formats strfmt.Registry) error {

	if err := validate.Required("RateInternational", "body", m.RateInternational); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateRateItcCanada(formats strfmt.Registry) error {

	if err := validate.Required("RateItcCanada", "body", m.RateItcCanada); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateRateItcUsa(formats strfmt.Registry) error {

	if err := validate.Required("RateItcUsa", "body", m.RateItcUsa); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateRateLocal(formats strfmt.Registry) error {

	if err := validate.Required("RateLocal", "body", m.RateLocal); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateRateOnNet(formats strfmt.Registry) error {

	if err := validate.Required("RateOnNet", "body", m.RateOnNet); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateRateOutgoing(formats strfmt.Registry) error {

	if err := validate.Required("RateOutgoing", "body", m.RateOutgoing); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsStatResponse) validateRateUsa(formats strfmt.Registry) error {

	if err := validate.Required("RateUsa", "body", m.RateUsa); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this thinktel u control Api data contracts stat response based on context it is used
func (m *ThinkteluControlAPIDataContractsStatResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ThinkteluControlAPIDataContractsStatResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThinkteluControlAPIDataContractsStatResponse) UnmarshalBinary(b []byte) error {
	var res ThinkteluControlAPIDataContractsStatResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
