// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ThinkteluControlAPIDataContractsSIPTrunkPlan thinktel u control Api data contracts Sip trunk plan
//
// swagger:model Thinktel.uControl.Api.DataContracts.SipTrunkPlan
type ThinkteluControlAPIDataContractsSIPTrunkPlan struct {

	// account
	// Required: true
	Account *int64 `json:"Account"`

	// burst price
	// Required: true
	BurstPrice *float64 `json:"BurstPrice"`

	// channel price
	// Required: true
	ChannelPrice *float64 `json:"ChannelPrice"`

	// default DID price
	// Required: true
	DefaultDIDPrice *float64 `json:"DefaultDIDPrice"`

	// enabled
	// Required: true
	Enabled *bool `json:"Enabled"`

	// ID
	// Required: true
	ID *string `json:"ID"`

	// monthly price
	// Required: true
	MonthlyPrice *float64 `json:"MonthlyPrice"`

	// name
	Name string `json:"Name,omitempty"`
}

// Validate validates this thinktel u control Api data contracts Sip trunk plan
func (m *ThinkteluControlAPIDataContractsSIPTrunkPlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBurstPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultDIDPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonthlyPrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThinkteluControlAPIDataContractsSIPTrunkPlan) validateAccount(formats strfmt.Registry) error {

	if err := validate.Required("Account", "body", m.Account); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsSIPTrunkPlan) validateBurstPrice(formats strfmt.Registry) error {

	if err := validate.Required("BurstPrice", "body", m.BurstPrice); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsSIPTrunkPlan) validateChannelPrice(formats strfmt.Registry) error {

	if err := validate.Required("ChannelPrice", "body", m.ChannelPrice); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsSIPTrunkPlan) validateDefaultDIDPrice(formats strfmt.Registry) error {

	if err := validate.Required("DefaultDIDPrice", "body", m.DefaultDIDPrice); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsSIPTrunkPlan) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("Enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsSIPTrunkPlan) validateID(formats strfmt.Registry) error {

	if err := validate.Required("ID", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsSIPTrunkPlan) validateMonthlyPrice(formats strfmt.Registry) error {

	if err := validate.Required("MonthlyPrice", "body", m.MonthlyPrice); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this thinktel u control Api data contracts Sip trunk plan based on context it is used
func (m *ThinkteluControlAPIDataContractsSIPTrunkPlan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ThinkteluControlAPIDataContractsSIPTrunkPlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThinkteluControlAPIDataContractsSIPTrunkPlan) UnmarshalBinary(b []byte) error {
	var res ThinkteluControlAPIDataContractsSIPTrunkPlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
