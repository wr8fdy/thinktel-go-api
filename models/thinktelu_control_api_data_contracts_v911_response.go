// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ThinkteluControlAPIDataContractsV911Response thinktel u control Api data contracts v911 response
//
// swagger:model Thinktel.uControl.Api.DataContracts.V911Response
type ThinkteluControlAPIDataContractsV911Response struct {

	// message
	Message string `json:"Message,omitempty"`

	// number
	// Required: true
	Number *int64 `json:"Number"`

	//
	//
	//     Rejected = 0
	//     Accepted = 1
	//     Deferred = 2
	//     Conditional = 3
	//     Error = 4
	//
	// Required: true
	Reply *int64 `json:"Reply"`

	// response data
	ResponseData *ThinkteluControlAPIDataContractsV911ResponseWrapper `json:"ResponseData,omitempty"`
}

// Validate validates this thinktel u control Api data contracts v911 response
func (m *ThinkteluControlAPIDataContractsV911Response) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReply(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponseData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThinkteluControlAPIDataContractsV911Response) validateNumber(formats strfmt.Registry) error {

	if err := validate.Required("Number", "body", m.Number); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsV911Response) validateReply(formats strfmt.Registry) error {

	if err := validate.Required("Reply", "body", m.Reply); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsV911Response) validateResponseData(formats strfmt.Registry) error {
	if swag.IsZero(m.ResponseData) { // not required
		return nil
	}

	if m.ResponseData != nil {
		if err := m.ResponseData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResponseData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ResponseData")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this thinktel u control Api data contracts v911 response based on the context it is used
func (m *ThinkteluControlAPIDataContractsV911Response) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResponseData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThinkteluControlAPIDataContractsV911Response) contextValidateResponseData(ctx context.Context, formats strfmt.Registry) error {

	if m.ResponseData != nil {

		if swag.IsZero(m.ResponseData) { // not required
			return nil
		}

		if err := m.ResponseData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResponseData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ResponseData")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ThinkteluControlAPIDataContractsV911Response) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThinkteluControlAPIDataContractsV911Response) UnmarshalBinary(b []byte) error {
	var res ThinkteluControlAPIDataContractsV911Response
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
