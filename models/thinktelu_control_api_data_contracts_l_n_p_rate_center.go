// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ThinkteluControlAPIDataContractsLNPRateCenter thinktel u control Api data contracts l n p rate center
//
// swagger:model Thinktel.uControl.Api.DataContracts.LNPRateCenter
type ThinkteluControlAPIDataContractsLNPRateCenter struct {

	// country
	// Required: true
	Country *string `json:"Country"`

	// l n p
	// Required: true
	LNP *bool `json:"LNP"`

	// local
	// Required: true
	Local *bool `json:"Local"`

	// name
	// Required: true
	Name *string `json:"Name"`

	// network type
	// Required: true
	NetworkType *string `json:"NetworkType"`

	// on net
	// Required: true
	OnNet *bool `json:"OnNet"`
}

// Validate validates this thinktel u control Api data contracts l n p rate center
func (m *ThinkteluControlAPIDataContractsLNPRateCenter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLNP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnNet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThinkteluControlAPIDataContractsLNPRateCenter) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("Country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsLNPRateCenter) validateLNP(formats strfmt.Registry) error {

	if err := validate.Required("LNP", "body", m.LNP); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsLNPRateCenter) validateLocal(formats strfmt.Registry) error {

	if err := validate.Required("Local", "body", m.Local); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsLNPRateCenter) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsLNPRateCenter) validateNetworkType(formats strfmt.Registry) error {

	if err := validate.Required("NetworkType", "body", m.NetworkType); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsLNPRateCenter) validateOnNet(formats strfmt.Registry) error {

	if err := validate.Required("OnNet", "body", m.OnNet); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this thinktel u control Api data contracts l n p rate center based on context it is used
func (m *ThinkteluControlAPIDataContractsLNPRateCenter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ThinkteluControlAPIDataContractsLNPRateCenter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThinkteluControlAPIDataContractsLNPRateCenter) UnmarshalBinary(b []byte) error {
	var res ThinkteluControlAPIDataContractsLNPRateCenter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
