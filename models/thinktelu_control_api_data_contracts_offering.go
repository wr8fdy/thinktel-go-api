// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ThinkteluControlAPIDataContractsOffering thinktel u control Api data contracts offering
//
// swagger:model Thinktel.uControl.Api.DataContracts.Offering
type ThinkteluControlAPIDataContractsOffering struct {

	// Unique identifier for the product offering.
	// Required: true
	OfferingID *string `json:"OfferingID"`

	// Only applicable for child products that cannot exist on their own; these subscriptions would be valid potential parent subscriptions.
	PotentialParentSubscriptions []*ThinkteluControlAPIDataContractsSubscription `json:"PotentialParentSubscriptions"`

	// product name
	// Required: true
	ProductName *ThinkteluControlAPIDataContractsLocalizedString `json:"ProductName"`

	// Type of product offer. Designed to assist determining which type of product specific order to submit.
	//
	//     GeneralProduct = 1
	//     GeneralChildProduct = 2
	//     ResidentialLine = 3
	//     BusinessLine = 4
	//     PermanentCallForward = 5
	//     BusinessPermanentCallForward = 6
	//     VirtualFax = 7
	//
	// Required: true
	// Enum: [1,2,3,4,5,6,7]
	Type *int64 `json:"Type"`
}

// Validate validates this thinktel u control Api data contracts offering
func (m *ThinkteluControlAPIDataContractsOffering) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOfferingID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePotentialParentSubscriptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThinkteluControlAPIDataContractsOffering) validateOfferingID(formats strfmt.Registry) error {

	if err := validate.Required("OfferingID", "body", m.OfferingID); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsOffering) validatePotentialParentSubscriptions(formats strfmt.Registry) error {
	if swag.IsZero(m.PotentialParentSubscriptions) { // not required
		return nil
	}

	for i := 0; i < len(m.PotentialParentSubscriptions); i++ {
		if swag.IsZero(m.PotentialParentSubscriptions[i]) { // not required
			continue
		}

		if m.PotentialParentSubscriptions[i] != nil {
			if err := m.PotentialParentSubscriptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PotentialParentSubscriptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("PotentialParentSubscriptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsOffering) validateProductName(formats strfmt.Registry) error {

	if err := validate.Required("ProductName", "body", m.ProductName); err != nil {
		return err
	}

	if m.ProductName != nil {
		if err := m.ProductName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProductName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ProductName")
			}
			return err
		}
	}

	return nil
}

var thinktelUControlApiDataContractsOfferingTypeTypePropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[1,2,3,4,5,6,7]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		thinktelUControlApiDataContractsOfferingTypeTypePropEnum = append(thinktelUControlApiDataContractsOfferingTypeTypePropEnum, v)
	}
}

// prop value enum
func (m *ThinkteluControlAPIDataContractsOffering) validateTypeEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, thinktelUControlApiDataContractsOfferingTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ThinkteluControlAPIDataContractsOffering) validateType(formats strfmt.Registry) error {

	if err := validate.Required("Type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this thinktel u control Api data contracts offering based on the context it is used
func (m *ThinkteluControlAPIDataContractsOffering) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePotentialParentSubscriptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProductName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThinkteluControlAPIDataContractsOffering) contextValidatePotentialParentSubscriptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PotentialParentSubscriptions); i++ {

		if m.PotentialParentSubscriptions[i] != nil {

			if swag.IsZero(m.PotentialParentSubscriptions[i]) { // not required
				return nil
			}

			if err := m.PotentialParentSubscriptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PotentialParentSubscriptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("PotentialParentSubscriptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsOffering) contextValidateProductName(ctx context.Context, formats strfmt.Registry) error {

	if m.ProductName != nil {

		if err := m.ProductName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProductName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ProductName")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ThinkteluControlAPIDataContractsOffering) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThinkteluControlAPIDataContractsOffering) UnmarshalBinary(b []byte) error {
	var res ThinkteluControlAPIDataContractsOffering
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
