// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ThinkteluControlAPIDataContractsPortInStatus thinktel u control Api data contracts port in status
//
// swagger:model Thinktel.uControl.Api.DataContracts.PortInStatus
type ThinkteluControlAPIDataContractsPortInStatus struct {

	// uControl account code.
	AccountNumber string `json:"AccountNumber,omitempty"`

	// When status is REJECTED, then will indicate if our porting team is disputing the rejection.
	// Example: false
	Disputing bool `json:"Disputing,omitempty"`

	// End user customer name submitted on LSR.
	EndUserName string `json:"EndUserName,omitempty"`

	// List of telephone numbers submitted on LSR
	NumbersToPort []int64 `json:"NumbersToPort"`

	// The port-in date submitted on LSR formatted as YYYYMMDD.
	PortDate string `json:"PortDate,omitempty"`

	// When status is REJECTED, then will be a list of all reject records.
	RejectDetails []*ThinkteluControlAPIDataContractsRejectDetail `json:"RejectDetails"`

	// When status is REJECTED, then will contain a human readable description of the first applicable reject code
	RejectReason string `json:"RejectReason,omitempty"`

	// When status is REJECTED, then will be a summary of the up to the first five reject errors and possibly a message provided by our porting team.
	// Max Length: 2000
	RejectSummary string `json:"RejectSummary,omitempty"`

	// Reseller name submitted on LSR, if applicable.
	Reseller string `json:"Reseller,omitempty"`

	// Status of port-in request. Possible values are: PENDING, SUBMITTED, CONFIRMED, CONFIRMEDwDATECHANGE, CONFIRMEDwEXCEPTION, COMPLETED, REJECTED, HOLD, RESCHEDULED, CANCELLATIONPENDING, CANCELLED, PARTIALCANCELLATION, FULLCANCELLATION, EXPIRED.
	// Required: true
	Status *string `json:"Status"`

	// Primary ticket associated with port-in request.
	TicketID string `json:"TicketId,omitempty"`

	// Indicator of whether or not the status has been validated.
	// Required: true
	ValidationLSC *bool `json:"ValidationLSC"`
}

// Validate validates this thinktel u control Api data contracts port in status
func (m *ThinkteluControlAPIDataContractsPortInStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRejectDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRejectSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidationLSC(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThinkteluControlAPIDataContractsPortInStatus) validateRejectDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.RejectDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.RejectDetails); i++ {
		if swag.IsZero(m.RejectDetails[i]) { // not required
			continue
		}

		if m.RejectDetails[i] != nil {
			if err := m.RejectDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RejectDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("RejectDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsPortInStatus) validateRejectSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.RejectSummary) { // not required
		return nil
	}

	if err := validate.MaxLength("RejectSummary", "body", m.RejectSummary, 2000); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsPortInStatus) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ThinkteluControlAPIDataContractsPortInStatus) validateValidationLSC(formats strfmt.Registry) error {

	if err := validate.Required("ValidationLSC", "body", m.ValidationLSC); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this thinktel u control Api data contracts port in status based on the context it is used
func (m *ThinkteluControlAPIDataContractsPortInStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRejectDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThinkteluControlAPIDataContractsPortInStatus) contextValidateRejectDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RejectDetails); i++ {

		if m.RejectDetails[i] != nil {

			if swag.IsZero(m.RejectDetails[i]) { // not required
				return nil
			}

			if err := m.RejectDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RejectDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("RejectDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ThinkteluControlAPIDataContractsPortInStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThinkteluControlAPIDataContractsPortInStatus) UnmarshalBinary(b []byte) error {
	var res ThinkteluControlAPIDataContractsPortInStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
